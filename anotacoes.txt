##################################################################################################################

@EnableSpringDataWebSupport

Anotação para conseguirmos repassar dados da requisição para o Spring Data JPA.
Ex: Pegar o Pageable no parâmetro de um controlador, preenchido com os dados da requisição, 
e repassar para o JpaRepository como critério de consulta.

##################################################################################################################

Por padrão, o Spring ordena a paginação pela chave primária.
Podemos definir mais de um atributo para ser critério de ordenação, com direções diferentes.
	
http://localhost:8080/topicos?page=0&size=2&sort=titulo,asc&sort=dataCriacao,desc

##################################################################################################################

Page<Topico> findByCurso_NomeContainingIgnoreCase(String nome, Pageable pageable);

Caso utilizassemos findByCursoNomeContainingIgnoreCase, e houvesse um
atributo chamado cursoNome na entidade Topico, iria haver erro de
ambiguidade.
Utilizando o underline conseguimos definir que a propriedade após o underline
pertence a entidade que está antes do underline.

##################################################################################################################

O Cache do Spring é inteligente e percebe alterações de valores nos parâmetros da requisição.
Para habilitarmos, precisamos utilizar a anotação @EnableCaching após inserir a dependência.
Basta anotarmos o método que queremos realizar cache com @Cacheable(value = <id do método>), com import do pacote do Spring.

@CacheEvict(value = <id's dos métodos a terem os caches invalidados>, allEntries = true)
Devemos utilizar esta anotação nos métodos que irão precisar invalidar um cache para atualizar as informações cacheadas.

##################################################################################################################

Não conseguimos realizar injeção de dependência com @Autowired em filtros, e nem injetá-los como dependência em outras classes.

##################################################################################################################

@DataJpaTest para testes que envolvam apenas a camada de persistência.

@WebMvcTest para testes que envolvam apenas a camada de controller/rest controller/controller advice.

Porém, para testar todas as camadas da aplicação @SpringBootTest.

##################################################################################################################

Por padrão, o Spring Boot Test considera que os testes serão executados utilizando banco de dados em memória, como o H2.

Caso queiramos testar utilizando um banco de dados que não é em memória, devemos anotar os testes com @AutoConfigureTestDatabase(replace = Replace.NONE).

Assim o banco utilizado será o banco de dados do application.properties.

@ActiveProfiles(value = "test") // Forçando o Spring a utilizar o profile "test" ao executar uma classe.

O Arquivo data.sql, por padrão, é executado nos banco de dados dos diferentes ambientes(profiles ativos).

Para impedir isso em determinado ambiente, devemos utilizar a seguinte propriedade no .properties referente ao ambiente:

spring.datasource.initialization-mode=never

##################################################################################################################
